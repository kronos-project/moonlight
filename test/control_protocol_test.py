import pytest
from moonlight.ki.control import ControlMessage, ControlProtocol
from moonlight.ki.net_common import BytestreamReader, KIPacketHeader
from .fixtures import *


@pytest.fixture
def control_protocol():
    return ControlProtocol()


def test_session_offer(control_protocol, control_session_offer):
    reader = BytestreamReader(control_session_offer)
    header = KIPacketHeader(reader)
    message = control_protocol.decode_packet(reader, header)
    assert message.OPCODE == 0
    assert message.reserved == 0
    assert message.session_id == 1419
    assert message.signed_msg_len == 281
    assert message.unix_timestamp_millis_into_second == 276
    assert message.unix_timestamp_seconds == 1639851252
    assert message.signed_msg == (
        b"\x02\x03\xfb\x11\xe7\x02\x88\x00\xf1\x16\x86\x9c\n"
        b"{\xa8\r$1\xaeZh\x82%\x8b\xd8\xb4\xc9\xed\xda\x0b"
        b"\x89\x1fQ\xe6\x11\x94o\x0b\x16\xabqh\x9a\xe8\xe0"
        b"\x92\xd1\x89Ae&\xb0\xfe\xbe(\x8dB\xae\xfd\r\x7f"
        b"\x8es\xcf;B\xe0d~,\xd4\xe3E\x89D\x9d\x01\xc8\xf1"
        b"\x10~f\x07\x05\x82\xb3\xba\x9e\x06\x90\xa1\xcca\n"
        b"\xea\x1e\xce\x08L2vC\xca\xfd\xd8g\xe8t\xfe\xbe\xaf"
        b"\xd5]i\\y\xf9\x90x\xea\xea\x1eW\x15;\x9a1A\xe0\xcd"
        b"X\xb9\xd6\xfc\x06\x8c\x8as\xf0\\\xb3\xc66\x9c\x9e"
        b"\xdemJ\x8d\x8c\x88\x0bv\xb1\xc3\xde~\xf0=\xe7q\x02"
        b"k\x8bv>\xe5\xf8\xa0Db\x86K\xa9\xd6Oh(\x15b\xb0\xb7"
        b"\xccE$\xb4\xad\x17\xdbk4\x8b\x89\xd8VD\xacj\x81y"
        b"gP)\xc5\x92.S-\x10\x8e\x06W\x8cd\xec\x0e\xb5\xd5"
        b"\xc6\x03\xa4j\xe36\xf4\x12Xw\x14\xc3so\xbc\xa8\x03"
        b"\x95\xc3a \xdf5.\xf7\xf6\x80<\xf6K@\xca\x15\xee\xe9"
        b"\xb0u\x89\xfdY\x9e\xf8_\x8c\xab#4\xad\xec\x8e\x13"
        b"\xa7W\xac\xdb\xbf\xf8m\xf7\xcc\xa0\x03O"
    )


def test_session_accept(control_protocol, control_session_accept):
    reader = BytestreamReader(control_session_accept)
    header = KIPacketHeader(reader)
    message = control_protocol.decode_packet(reader, header)
    assert message.OPCODE == 5
    assert message.reserved_start == 0
    assert message.reserved_end == 0
    assert message.session_id == 1419
    assert message.signed_msg_len == 257
    assert message.unix_timestamp_millis_into_second == 288
    assert message.unix_timestamp_seconds == 1639851231
    assert message.signed_msg == (
        b"\x01r\x92~\xc9ko\xc1\xd0\xae"
        b"\x9b\xda9\x8d\xfc\x87\nw\xe7\x9cB\xc9\x00\x9f\xeb5"
        b"\x19\xc7\x9a\xbf\x0f^!z\xe5\x97W\x99k\xaf\xb9v\xbd"
        b"\xb6B\xa5E\xf1B\xe1_T1\x8eo\xed\x07\x7fdC0\xcf\xe9"
        b"\n\x9d\xf2\x15M\xc6t\x06{Q\xe5\x1d\x9d.\xbb/\xd5"
        b"\xef`\x03\x07\xfb\"N\x9e\x9e\xcf)\x12\\\xa1\xc9\xed"
        b"2!\xc7\x99T<h:\xe5\x8e\xb9\x80I\xbe$\x84\xba\x16"
        b"\x86\xbb\xe8\xdf\xe6\x1e\xd0\xa8G&c{\x07\xe1\xca"
        b"\x84h\xe2\xf9\x8c\xb0\r\\c9\x85\xc9\x11\xad9\x12"
        b"\xaf\xba\xc8\xe5\xc1n\n\x87\xce_V\xf5\x11\xee\xc9"
        b"\x84ac\x8f\\\x817\x8c\xb5U\xbb\xe7\x8bJJ\n\xa3\xa4"
        b"&\xeclM\x95x\xce'KE\x88\xe2,(\xbf>u\x0e\xc0\xb2"
        b"\xe6\xda\xd5Y\xf6\xd5wv\xbf-\x12\xfb\xf315c\x0e\xd8"
        b"/l\x0bO\x8e\xba`\xb9\xe10\xd1PK\xb8\xc4K\xbb\x02"
        b"\xeb\x11\xcc\xe6}\xf1\x11\x9e\xfd\xdb\xba\x8f\x8f"
        b"w\x93X\xd8~\x1c\xac\x89\x16\t"
    )
